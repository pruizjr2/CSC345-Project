import java.util.Random;

public class FibonacciHeapTests {

    public static void main(String[] args) {
        testInsertion();
        testExtraction();
        testDecreaseKey();
        testMerge();
        testDeletion();
    }

    private static void testInsertion() {
        FibonacciHeap heap = new FibonacciHeap();

        // Insert one node into an empty heap
        FibonacciHeapNode node1 = new FibonacciHeapNode(5);
        heap.insert(node1);
        assert heap.minimum() == node1 : "Insertion of single node failed";

        // Insert multiple nodes with different keys
        FibonacciHeapNode node2 = new FibonacciHeapNode(3);
        FibonacciHeapNode node3 = new FibonacciHeapNode(8);
        FibonacciHeapNode node4 = new FibonacciHeapNode(2);
        heap.insert(node2);
        heap.insert(node3);
        heap.insert(node4);
        assert heap.minimum() == node4 : "Insertion of multiple nodes failed";

        System.out.println("Insertion test passed.");
    }

    private static void testExtraction() {
        FibonacciHeap heap = new FibonacciHeap();
        FibonacciHeapNode node1 = new FibonacciHeapNode(5);
        FibonacciHeapNode node2 = new FibonacciHeapNode(3);
        FibonacciHeapNode node3 = new FibonacciHeapNode(8);
        heap.insert(node1);
        heap.insert(node2);
        heap.insert(node3);

        // Extract the minimum node and verify heap structure
        FibonacciHeapNode minNode = heap.extractMin();
        assert minNode == node2 : "Extraction of minimum node failed";
        assert heap.minimum() == node1 : "Heap structure after extraction incorrect";

        System.out.println("Extraction test passed.");
    }

    private static void testDecreaseKey() {
        FibonacciHeap heap = new FibonacciHeap();
        FibonacciHeapNode node1 = new FibonacciHeapNode(5);
        FibonacciHeapNode node2 = new FibonacciHeapNode(3);
        FibonacciHeapNode node3 = new FibonacciHeapNode(8);
        heap.insert(node1);
        heap.insert(node2);
        heap.insert(node3);

        // Decrease the key of a node
        heap.decreaseKey(node3, 2);
        assert heap.minimum() == node3 : "Decrease key test failed";
        
        System.out.println("Decrease key test passed.");
    }

    private static void testMerge() {
        FibonacciHeap heap1 = new FibonacciHeap();
        FibonacciHeap heap2 = new FibonacciHeap();

        // Insert nodes into both heaps
        FibonacciHeapNode node1 = new FibonacciHeapNode(5);
        FibonacciHeapNode node2 = new FibonacciHeapNode(3);
        FibonacciHeapNode node3 = new FibonacciHeapNode(8);
        heap1.insert(node1);
        heap1.insert(node2);
        heap2.insert(node3);

        // Merge the heaps and verify
        heap1.merge(heap2);
        assert heap1.minimum() == node2 : "Merge test failed";
        assert heap1.minimum().right == node1 : "Merge test failed";

        System.out.println("Merge test passed.");
    }

    private static void testDeletion() {
        FibonacciHeap heap = new FibonacciHeap();
        FibonacciHeapNode node1 = new FibonacciHeapNode(5);
        FibonacciHeapNode node2 = new FibonacciHeapNode(3);
        FibonacciHeapNode node3 = new FibonacciHeapNode(8);
        heap.insert(node1);
        heap.insert(node2);
        heap.insert(node3);

        // Delete a specific node
        heap.delete(node2);
        assert heap.minimum() == node1 : "Deletion test failed";
        assert node1.right == node3 : "Deletion test failed";

        System.out.println("Deletion test passed.");
    }
}
